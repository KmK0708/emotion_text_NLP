# -*- coding: utf-8 -*-
"""fashion_mnist_w_tensorboard.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cSDNuI9YdNsDbKzlGg8dHCGBmB6xZM7L
"""

# tensorflow, tf.keras 임포트
import tensorflow as tf
from tensorflow import keras

# helper 라이브러리 임포트
import numpy as np
import matplotlib.pyplot as plt

from datetime import datetime
import os

#print(tf.__version__)

# 패션 MNIST 데이터 로드
fashion_mnist = keras.datasets.fashion_mnist

(train_images, train_labels), (test_images, test_labels) = fashion_mnist.load_data()

# 출력을 위해, 클래스 이름 선언
class_names = ['T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat',
               'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']

# 훈련 데이터 확인
print("train images : ", train_images.shape)
print("test images : ", test_images.shape)
print("train lebel example : ", train_labels.shape, train_labels)

# 데이터 이미지 확인
plt.figure()
plt.imshow(train_images[1])
plt.colorbar() # 색을 나타내주기
plt.grid(False) # 격자표시 나타낼것인가? false면 x
plt.show() # 결과 보여주기

plt.figure(figsize=(10,10))
for i in range(25):
    plt.subplot(5,5,i+1)
    plt.xticks([])
    plt.yticks([])
    plt.grid(False)
    plt.imshow(train_images[i], cmap=plt.cm.binary)
    plt.xlabel(class_names[train_labels[i]])
plt.show()

dir_name = "tf_log"
def make_tensorboard_dir(dir_name):
    root_logdir = os.path.join(os.curdir, dir_name)
    sub_dir_name = datetime.now().strftime("%Y%m%d-%H%M%S")
    return os.path.join(root_logdir, sub_dir_name)

tb_log_dir = make_tensorboard_dir(dir_name)
tensorboard_callback = keras.callbacks.TensorBoard(log_dir=tb_log_dir)

# 데이터 전처리
train_images = train_images / 255.0
test_images = test_images / 255.0

# 모델 설계
model = keras.Sequential([
    keras.layers.Flatten(input_shape=(28, 28)), # 28, 28 행렬을 1열로 쫙 나열해줌
    keras.layers.Dense(128, activation='relu'),
    keras.layers.Dense(64, activation='relu'),
    keras.layers.Dense(128, activation='relu'),
    keras.layers.Dense(64, activation='relu'),
    keras.layers.Dense(10, activation='softmax')
])
# keras.layers.Flatten : 2차원 이미지 정보를 1차원 배열 변환
# keras.layers.Dense : densely-connected/fully-connected 노드(뉴런)

model.summary()

# 훈련 설정
model.compile(optimizer='sgd',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

# 학습
model.fit(train_images, train_labels, epochs=3, callbacks=[tensorboard_callback])

# 정확도 평가
test_loss, test_acc = model.evaluate(test_images,  test_labels, verbose=2, callbacks=[tensorboard_callback])

print('테스트 정확도: {:.2f}%'.format(test_acc*100))

#훈련된 모델활용한 예측
predictions = model.predict(test_images)

#예측 결과
predictions[0]

np.argmax(predictions[0])

test_labels[0]

# 각 클래스에 대한 예측을 표시하기 위한 함수
def plot_image(i, predictions_array, true_label, img):
  predictions_array, true_label, img = predictions_array[i], true_label[i], img[i]
  plt.grid(False)
  plt.xticks([])
  plt.yticks([])

  plt.imshow(img, cmap=plt.cm.binary)

  predicted_label = np.argmax(predictions_array)
  if predicted_label == true_label:
    color = 'blue'
  else:
    color = 'red'

  plt.xlabel("{} {:2.0f}% ({})".format(class_names[predicted_label],
                                100*np.max(predictions_array),
                                class_names[true_label]),
                                color=color)

def plot_value_array(i, predictions_array, true_label):
  predictions_array, true_label = predictions_array[i], true_label[i]
  plt.grid(False)
  plt.xticks([])
  plt.yticks([])
  thisplot = plt.bar(range(10), predictions_array, color="#777777")
  plt.ylim([0, 1])
  predicted_label = np.argmax(predictions_array)

  thisplot[predicted_label].set_color('red')
  thisplot[true_label].set_color('blue')

i = 0
plt.figure(figsize=(6,3))
plt.subplot(1,2,1)
plot_image(i, predictions, test_labels, test_images)
plt.subplot(1,2,2)
plot_value_array(i, predictions,  test_labels)
plt.show()

i = 150
plt.figure(figsize=(6,3))
plt.subplot(1,2,1)
plot_image(i, predictions, test_labels, test_images)
plt.subplot(1,2,2)
plot_value_array(i, predictions,  test_labels)
plt.show()

num_rows = 10
num_cols = 3
num_images = num_rows*num_cols
plt.figure(figsize=(2*2*num_cols, 2*num_rows))
for i in range(num_images):
  plt.subplot(num_rows, 2*num_cols, 2*i+1)
  plot_image(i, predictions, test_labels, test_images)
  plt.subplot(num_rows, 2*num_cols, 2*i+2)
  plot_value_array(i, predictions, test_labels)
plt.show()

# 이미지로 테스트
img = test_images[0]; img = (np.expand_dims(img,0))
#img = test_images[0:3]
print(img.shape)

predictions_single = model.predict(img)

print(predictions_single)

plot_value_array(0, predictions_single, test_labels)
_ = plt.xticks(range(10), class_names, rotation=45)

np.argmax(predictions_single[0])

# CNN 모델
model2 = keras.Sequential([
    keras.layers.Conv2D(128, (3, 3), activation='relu', input_shape=(28, 28, 1)),
    keras.layers.MaxPooling2D((2, 2)),
    keras.layers.Conv2D(64, (3, 3), activation='relu'),
    keras.layers.MaxPooling2D((2, 2)),
    keras.layers.Conv2D(64, (3, 3), activation='relu'),
    keras.layers.MaxPooling2D((2, 2)),
    #keras.layers.Conv2D(128, (3, 3), activation='relu'),
    #keras.layers.MaxPooling2D((2, 2)),
    #keras.layers.Conv2D(32, (3, 3), activation='relu'),
    keras.layers.Flatten(),
    keras.layers.Dense(16, activation='relu'),
    keras.layers.Dense(10, activation='softmax')
])

model2.summary()

from google.colab import drive
drive.mount('/content/drive')

#checkpoint_path = '/content/drive/MyDrive/Colab Notebooks/cpkt/cp--{epoch:04d}.ckpt'
checkpoint_path = '/content/drive/MyDrive/Colab Notebooks/cpkt/cp--{epoch:04d}.weights.h5'
checkpoint_dir = os.path.dirname(checkpoint_path)

cp_callback = tf.keras.callbacks.ModelCheckpoint(checkpoint_path,
                                                 save_weights_only=True,
                                                 verbose=0,
                                                 save_freq='epoch',
                                                 )  # 에포크마다 가중치를 저장

# 학습과정 설정
model2.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

# 학습 및 평가
train_images2 = train_images.reshape((60000, 28, 28, 1))
test_images2 = test_images.reshape((10000, 28, 28, 1))
#train_images, test_images = train_images / 255.0, test_images / 255.0


history = model2.fit(train_images2, train_labels, epochs=2, validation_split=0.2, callbacks=[cp_callback, tensorboard_callback])
#model.evaluate(test_images, test_labels)

model2.load_weights('/content/drive/MyDrive/Colab Notebooks/cpkt/cp--0001.weights.h5')

# 정확도 평가
test_loss, test_acc = model2.evaluate(test_images2,  test_labels, verbose=2)

print('\n테스트 정확도:', test_acc)

history_dict = history.history
history_dict.keys()

acc = history_dict['accuracy']
val_acc = history_dict['val_accuracy']
loss = history_dict['loss']
val_loss = history_dict['val_loss']

epochs = range(1, len(acc) + 1)

# bo: 파란색 점
plt.plot(epochs, loss, 'bo', label='Training loss')
# b : 파란 실선
plt.plot(epochs, val_loss, 'b', label='Validation loss')
plt.title('Training and validation loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()

plt.show()

plt.clf()
plt.plot(epochs, acc, 'bo', label='Training acc')
plt.plot(epochs, val_acc, 'b', label='Validation acc')
plt.title('Training and validation accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()

plt.show()

# Commented out IPython magic to ensure Python compatibility.
# %load_ext tensorboard
# %tensorboard --logdir {tb_log_dir}